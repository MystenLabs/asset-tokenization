// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import { BCS, getRustConfig, BcsReader, BcsWriter } from '@mysten/bcs';
const bcs = new BCS(getRustConfig());

/**
 * Rust representation of the compiled module; generated by the
 * `deserialize` call in the Wasm module.
 */
export interface MoveCompiledModule {
    version: number;
    self_module_handle_idx: number;
    module_handles: {
        address: number;
        name: number;
    }[];
    struct_handles: {
        name: number;
    }[];
    function_handles: {
        module: number;
        name: number;
        parameters: number;
        return_: number;
        type_parameters: number[];
    }[];
    field_handles: {
        name: number;
        // more fields
    };
    friend_decls: []; // TODO!
    struct_def_instantiations: []; // TODO!
    function_instantiations: {
        handle: number;
        type_parameters: number;
    }[];
    field_instantiations: []; // TODO!
    signatures: []; // TODO!
    /**
     * The list of the identifiers in the bytecode.
     * Is referenced by:
     * - module_handles
     * - field_handles
     * - function_handles
     * - struct_handles
     *
     * Identifiers must be sorted by the char code or the resulting
     * bytecode won't be usable on chain as a dependency.
     */
    identifiers: string[];
    address_identifiers: string[];
    constant_pool: {
        type_: string,
        data: number[]
    }[];
    metadata: []; // TODO!
    struct_defs: {
        struct_handle: number;
        field_information: {
            Declared: {
                name: number;
                signature: {
                    Struct: number;
                };
            }[];
        };
    }[];
    function_defs: {
        function: number;
        visibility: 'Private' | 'Public';
        is_entry: boolean;
        acquires_global_resources: [];
        code: {
            locals: number;
            code: any[]; // TODO!
        }[];
    };
}

/**
 * Helper class which wraps the underlying JSON structure.
 * Provides a way to change the identifiers and update the identifier indexes.
 */
export class CompiledModule {
    constructor(public inner: MoveCompiledModule) {}

    /**
     * Quite dangerous method which updates a constant in the constant pool. To make sure
     * that the index is set correctly, the `expectedValue` and `expectedType` must be provided
     * - this way we at least try to minimize the risk of updating a wrong constant.
     */
    updateConstant(idx: number, value: string, expectedValue: string, expectedType: string) {
        if (idx >= this.inner.constant_pool.length) {
            throw new Error('Invalid constant index; no constant exists at this index');
        }

        let { type_, data } = this.inner.constant_pool[idx];

        if (expectedType.toLowerCase() !== type_.toLowerCase()) {
            throw new Error(`Invalid constant type; expected ${expectedType}, got ${type_}`);
        }

        let oldValue = bcs.de(type_.toLowerCase(), new Uint8Array(data)).toString();

        if (oldValue !== expectedValue) {
            throw new Error(`Invalid constant value; expected ${expectedValue}, got ${oldValue}`);
        }

        this.inner.constant_pool[idx].data = [...bcs.ser(type_.toLowerCase(), value).toBytes()];

        return this;
    }

    /**
     * Update `identifiers`: provide the changeset where keys are the old
     * identifiers and values are the new identifiers.
     */
    changeIdentifiers(identMap: Record<string, string>): CompiledModule {
        // first apply patches - they don't affect indexes; but we need to keep
        // them to compare agains the new sorting order later.
        let identifiers = Object.freeze(
            [...this.inner.identifiers].map((ident) =>
                ident in identMap ? identMap[ident] : ident,
            ),
        );

        // sort the identifiers - indexes are changed.
        this.inner.identifiers = [...identifiers].sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));

        // console.log(this.inner.identifiers, identifiers);

        let indexUpdates = new Map();
        for (let ident of identifiers) {
            let oldIdx = identifiers.indexOf(ident);
            let newIdx = this.inner.identifiers.indexOf(ident);
            indexUpdates.set(oldIdx, newIdx);
        }

        const keys = ['module_handles', 'struct_handles', 'function_handles', 'field_handles'];

        // update each of the storages with the new index.
        for (let innerKey of keys) {
            // @ts-ignore
            this.inner[innerKey] = this.inner[innerKey].map((handle) => {
                return indexUpdates.has(handle.name)
                    ? { ...handle, name: indexUpdates.get(handle.name) }
                    : handle;
            });
        }

        // separately patch struct defs
        this.inner.struct_defs = this.inner.struct_defs.map((struct) => {
            let decl = struct.field_information.Declared.map((decl) => ({
                ...decl,
                name: indexUpdates.get(decl.name),
            }));

            return {
                ...struct,
                field_information: { Declared: decl },
            };
        });

        return this;
    }

    toJSON() {
        return this.inner;
    }
}

/**
 * Return the tempate bytecode.
 *
 * Can be acquired by compiling the `template` package and then fetching
 * via the command:
 * ```
 * xxd -c 0 -p build/template/bytecode_modules/template.mv | head -n 1
 * ```
 *
 * Should not be modified manually.
 * Depends on the `Collectible` package and must be rebuilt if the
 * `Collectible` has been republished on the network.
 */
export function getBytecode() {
    return 'a11ceb0b060000000901000602060c03120c041e02052012073265089701400ad7010a0ce1010d00070005010800000200000104000202020000060001000103030102020401020208000708020002080008010209000708020854454d504c4154450854656d706c617465095478436f6e7465787416636c61696d5f61737365745f747970655f70726f6f660b64756d6d795f6669656c640c666e66745f666163746f727904696e69740874656d706c6174650a74785f636f6e7465787400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000201040101020104010000000001040b000b0138000200';
}
